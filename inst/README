


Changes in lattice 0.5
======================

Not many. 

 o Biggest change in the way settings are handled. Settings are now
   stored in a global list called lattice.theme, and is truly
   device-specific (i.e., settings for more than one device can be
   used concurrently). Improved theme management via lset and
   show.settings. Changed defaults for color postscript/pdf.

 o bwplot and friends which had to have the grouping factor/shingle on
   the y-axis, can now have it on the x-axis as well. Far from
   perfect, though, since long labels can overlap with default
   settings.

 o panel.superpose now accepts an additional argument called
   panel.groups (by default panel.xyplot), which is the panel function
   actually called for each subset of the data determined by
   groups. Avoids having to write something as big as panel.superpose
   for natural generalizations like interaction plots. (Related new
   panel function: panel.linejoin)

 o colorkey in levelplot on all sides. Rendering of large key's much
   much faster (using grid.place suggested by Paul)

 o Other minor changes (doc, more arguments etc)

  

Changes in lattice 0.4
======================

Some of the implementation details have changed a lot. This might
cause some old code to fail, though no such instances are known.

No significant new features have been added, but there are several
bugfixes (notably in levelplot). The important changes are:

 o documentation restructured. There is no topic called `trellis.args'
   any more. The detailed description of the arguments common to all
   high level trellis functions can be found under help(xyplot)

 o once trellis.device() is called, Lattice graphics and base R
   graphics should mix more or less seamlessly. There is an optional
   argument in trellis.device() that can deal with the first blank
   page problem, with certain restrictions.

 o a (as yet very small) demo, called by demo("lattice")

 o Clipping: whatever is drawn by the panel function is now clipped to
   inside the panel region. Strip texts are clipped to inside the
   strips.

 o Axis tick labels by default do not overlap, some tick marks are
   left unlabelled if necessary.

 o The argument list for strip.default changed to be like S

 o levels() and nlevels() give sensible answers for shingles. new
   print methods for shingles and levels of shingles

 o colorkey (currently used only in levelplot) can now be placed to
   the left, top or bottom as well

 o new ``lines'' component in the par.strip.text argument that can be
   used to change the height of strips 

 o xlab, main etc can be double height strings (containing "\n"-s),
   the spaces allocated for these would be automatically adjusted

 o strip.default now has style=5

 o new panel.superpose.2 (suggested by Neil Klepeis)

 o the default colour settings sometimes seem too light on a white
   background. To deal with this, there is a new setting with some
   darker colours that can be set by calling lset(theme =
   "white.bg"). see ?lset for details. This is currently in a
   proof-of-concept stage (the colors in "white.bg" were chosen just
   because I liked their names), and suggestions for better color
   schemes would be most welcome.

 o show.settings() added






  

Changes in lattice 0.3
======================


The overall internal structure of the lattice library has changed
considerably in verion 0.3, in particular making it far more readable
and debuggable. However, this also means that some code which had
worked with the earlier version might now fail. (This is just a
discalimer, there are no known instances.)

New Features:
============

 o (Almost) full support for the `key' argument for drawing legends

 o Support for log scales

 o levelplot (but no contourplot. In particular, the contour = T option
   in levelplot does not work)

 o tmd now works on the output from qq 

 o panel function names can now be quoted strings

 o scales and its x and y components can now be just a character
   string like "free" or "sliced", i.e., the relation tag can be
   omitted. 

 o extension to the `type' argument in panel.xyplot and
   panel.superpose to allow stair-like and histogram-like plots
   (type="s" and "h" in plot), as well as loess smooths (using
   the loess.smooth function in the modreg library). Also, more
   than one of these options can now be used concurrently. This
   allows, for example, a grouped plot where a grouping variable
   can be used to fit separate loess curves along with the scatter
   for each group. See example(xyplot)

 o wrappers around grid functions with API-s of traditional graphics
   functions to help port existing S-Plus Trellis code. See below for
   details.

 o changes in print.trellis to allow mixing of Lattice and usual R 
   graphics. See below for details.


Porting S-Plus Trellis code to Lattice
======================================

One of the basic problems in porting existing Trellis code to R is the
unusability of the base R functions like lines and points inside panel
functions. To help make the changes more transparently, lattice now
includes several wrappers around grid functions that provide an API
similar to the corresponding base R functions. The list currently
includes lpoints, llines, ltext and lsegments.

Using Lattice and base R graphics concurrently
==============================================

Grid graphics normally do not mix with usual R graphics. However,
end-users typically might want to use lattice functions concurrently
with traditional R graphics. To allow this without intermittent calls
to grid.stop() and grid.start(), print.trellis (which ultimately does
all the plotting in lattice) now tries to preserve the state of the
device on which it plots. By default, library(lattice) opens a device
in grid enabled mode. It can be reverted to non grid mode by
grid.stop(). Subsequently, both Lattice functions and traditional
graphics functions can be used. Devices opened by trellis.device()
start in non-grid mode, unless grid.start() is called.



Still Missing
=============

 o contourplot, wireframe, cloud (partially implemented) and of course,
   piechart

 o Some components of scale (I haven't found a full list, so
   can't say exactly which are missing)

 o Fonts 

 o axis labels badly implemented, no checking for overlaps.








